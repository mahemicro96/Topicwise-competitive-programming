void merge(int v[], int l, int m, int h) {
  vector < int > temp(h - l + 1);

  int i = l, j = m + 1, k = 0;
  while (i <= m && j <= h) {
    if (v[j] < v[i]) {

      temp[k++] = v[j++];
    } else {
      temp[k++] = v[i++];
    }
  }
  while (i <= m)
    temp[k++] = v[i++];
  while (j <= h)
    temp[k++] = v[j++];
  for (i = l, k = 0; i <= h; i++, k++)
    v[i] = temp[k];

}

void mergeSort(int arr[], int l, int r) {
  if (l < r) {
    int m = l + (r - l) / 2;
    mergeSort(arr, l, m);
    mergeSort(arr, m + 1, r);
    merge(arr, l, m, r);
  }
}
/* Driver program to test above functions */
int main() {
  int arr[] = {
    12,
    11,
    13,
    5,
    6,
    7
  };
  int arr_size = sizeof(arr) / sizeof(arr[0]);
  mergeSort(arr, 0, arr_size - 1);
  return 0;
}

------------------------------------------------------------------
merging 2 sorted array:
vector<int> merge(vector<int>a,vector<int>b)
{
vector<int>c;
int i=0,j=0;
while(i!=a.size() && j!=b.size())
{
if(a[i]<b[i])
c.push_back(a[i++]);
else
c.push_back(b[j++]);
}
while(i!=a.size())
c.push_back(a[i++]);
while(j!=b.size())
c.push_back(b[j++]);
return c;
}


