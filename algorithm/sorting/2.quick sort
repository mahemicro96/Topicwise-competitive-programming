void quickSort(int arr[], int low, int high) {
  if (low < high) {
    // pi is partitioning index, arr[p] is now  at right place
    int pi = partition(arr, low, high);
    // Separately sort elements before / partition and after partition
    quickSort(arr, low, pi - 1);
    quickSort(arr, pi + 1, high);
  }
}
int partition(int arr[], int low, int high) {
  // Your code here
  int piv = arr[high];
  int partindex = low;
  for (int i = low; i < high; i++) {
    if (arr[i] <= piv) {
      swap(arr[i], arr[partindex]);
      partindex++;
    }

  }
  swap(arr[high], arr[partindex]);

  return partindex;
}
However, always choosing the last element in the partition as the pivot in this way results in poor performance (O(n 2)) on already sorted lists, or lists of identical elements
---------------------
mehtod:2(using median as pivot element)

#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
int partition(int arr[], int left, int right) {
  int i = left, j = right;
  int tmp;
  int pivot = arr[(left + right) / 2];
  //int pivot=arr[left] //for left as pivot element;
  /* partition */

  while (i <= j) {

    while (arr[i] < pivot)

      i++;

    while (arr[j] > pivot)

      j--;

    if (i <= j) {

      swap(arr[i],arr[j]);
      i++;
      j--;
    }
  };
  return i;

  /* recursion */
}
void quickSort(int arr[], int left, int right) {

  int piv = partition(arr, left, right);

  if (left < piv - 1)

    quickSort(arr, left, piv - 1);

  if (piv < right)

    quickSort(arr, piv, right);

}
main() {
  int n;
  cin >> n;
  int v[n];
  for (int i = 0; i < n; i++)
    cin >> v[i];
  quickSort(v, 0, n - 1);

  for (int i = 0; i < n; i++)
    std::cout << v[i] << ' ';
}
