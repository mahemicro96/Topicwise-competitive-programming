
What is a Cache? 
The cache is temporary storage which provide high speed data access.it stores frequently used computer programs, applications and data. 



What Is An LRU Cache?

 LRU Cache is a storage of items .LRU cauche enable quick access of those stored items.

least vs most recently used items:
When we access an item in the cache it moves to the front of the list as it is the most recently used item.
When we want to remove an item we remove it from the last of the list as it is the least recently used item in the cache.
When we insert an item we insert it into the front of the list as it is the most recently used item.


method:1 time:o(n) ,space:o(n)
---------------------------------------
 
#include <bits/stdc++.h> 
using namespace std; 
int fault=0;
class LRUCache { 
	list<int> dq; 

	unordered_map<int, list<int>::iterator> ma; 
	int csize;

public: 
	LRUCache(int n){
    csize = n; 
    }
	void refer(int x)
    {
      // not present in cache 
	if (ma.find(x) == ma.end()) { 
      fault++;
		// cache is full 
		if (dq.size() == csize) { 
			// delete least recently used element 
			int last = dq.back(); 

			// Pops the last elmeent 
			dq.pop_back(); 

			// Erase the last 
			ma.erase(last); 
		} 
	} 

	// present in cache 
	else
		dq.erase(ma[x]); 

	// update reference 
	dq.push_front(x); 
	ma[x] = dq.begin(); 
      
    }
	void display(){
   
	for (auto it = dq.begin(); it != dq.end(); 
		it++) 
		cout << (*it) << " "; 

	cout << endl; 
    }
}; 



// Driver Code 
int main() 
{ 
	LRUCache ca(4); 

	ca.refer(1); 
	ca.refer(2); 
	ca.refer(3); 
	ca.refer(1); 
	ca.refer(4); 
	ca.refer(5); 
	ca.display(); 

  cout<<fault<<endl;

	return 0; 
} 
// This code is contributed by Satish Srinivas 

We use two data structures to implement an LRU Cache.

Queue : which is implemented using a doubly linked list. The maximum size of the queue will be equal to the total number of frames available (cache size).
The most recently used pages will be near front end and least recently pages will be near the rear end. we use doubly linked list because if the key already
found in the queue we need to remove and add to front of the queue.front and back removing only possible in deque so,we use doubly linked list.

Hash : used to store the key and corresponding that key address which is found in doubly linked list.
When a page is referenced, the required page may be in the memory. If it is in the memory, we need to detach the node of the list and bring it 
to the front of the queue.

If the required page is not in memory, we bring that in memory. In simple words, we add a new node to the front of the queue and 
update the corresponding node address in the hash. If the queue is full, i.e. all the frames are full, we remove a node from the rear of the queue,
and add the new node to the front of the queue.
