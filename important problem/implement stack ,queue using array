/* C++ program to implement basic stack 
operations */
#include <bits/stdc++.h> 

using namespace std; 

#define MAX 1000 

class Stack { 
	int top; 

public: 
	int a[MAX]; // Maximum size of Stack 

	Stack() { top = -1; } 
	bool push(int x); 
	int pop(); 
	int peek(); 
	bool isEmpty(); 
}; 

bool Stack::push(int x) 
{ 
	if (top >= (MAX - 1)) { 
		cout << "Stack Overflow"; 
		return false; 
	} 
	else { 
		a[++top] = x; 
		cout << x << " pushed into stack\n"; 
		return true; 
	} 
} 

int Stack::pop() 
{ 
	if (top < 0) { 
		cout << "Stack Underflow"; 
		return 0; 
	} 
	else { 
		int x = a[top--]; 
		return x; 
	} 
} 
int Stack::peek() 
{ 
	if (top < 0) { 
		cout << "Stack is Empty"; 
		return 0; 
	} 
	else { 
		int x = a[top]; 
		return x; 
	} 
} 

bool Stack::isEmpty() 
{ 
	return (top < 0); 
} 

// Driver program to test above functions 
int main() 
{ 
	class Stack s; 
	s.push(10); 
	s.push(20); 
	s.push(30); 
	cout << s.pop() << " Popped from stack\n"; 

	return 0; 
} 
------------------------------------
for queue:
// C++ program to implement a queue using an array 
#include <bits/stdc++.h> 
using namespace std; 
#define MAX 100
class Queue { 
	int front,rear; 

public: 
	int a[MAX]; // Maximum size of Stack 

	Queue() { front = -1,rear=-1; } 

	// function to insert an element 
	// at the rear of the queue 
	void queueEnqueue(int data) 
	{ 
		// check queue is full or not 
		if ( rear>=MAX) { 
			printf("\nQueue is full\n"); 
			return; 
		} 

		// insert element at the rear 
		else { 
          if(front==-1)
            front++;
			a[++rear] = data; 
			 
		} 
		return; 
	} 

	// function to delete an element 
	// from the front of the queue 
	void queueDequeue() 
	{ 
		// if queue is empty 
		if (front == rear) { 
			printf("\nQueue is empty\n"); 
			return; 
		} 

		// shift all the elements from index 2 till rear 
		// to the left by one 
		else { 
          cout<<a[front]<<endl;
			for (int i = 0; i < rear; i++) { 
				a[i] = a[i + 1]; 
			} 

			// decrement rear 
			rear--; 
          if(rear==-1)
            front=-1;
		} 
		return; 
	} 

	// print queue elements 
	void queueDisplay() 
	{ 
		int i; 
		if (front == rear) { 
			printf("\nQueue is Empty\n"); 
			return; 
		} 

		// traverse front to rear and print elements 
		for (i = front; i <= rear; i++) { 
			printf(" %d <-- ", a[i]); 
		} 
		return; 
	} 

	// print front of queue 
	void queueFront() 
	{ 
		if (front == rear) { 
			printf("\nQueue is Empty\n"); 
			return; 
		} 
		printf("\nFront Element is: %d", a[front]); 
		return; 
	} 
}; 

// Driver code 
int main(void) 
{ 
	// Create a queue of capacity 4 
	Queue q; 

	// print Queue elements 
	q.queueDisplay(); 

	// inserting elements in the queue 
	q.queueEnqueue(20); 
	q.queueEnqueue(30); 
	q.queueEnqueue(40); 
	q.queueEnqueue(50); 
cout<<endl;
	// print Queue elements 
	q.queueDisplay(); 

	// insert element in the queue 
	q.queueEnqueue(60); 
cout<<endl;
	// print Queue elements 
	q.queueDisplay(); 
cout<<endl;
	q.queueDequeue(); 
	q.queueDequeue(); 
cout<<endl;
	// print Queue elements 
	q.queueDisplay(); 
cout<<endl;
	// print front of the queue 
	q.queueFront(); 

	return 0; 
} 
