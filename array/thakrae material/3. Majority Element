method1:
moore's voting algo
o(n) with no extra space

#include <bits/stdc++.h>
using namespace std;
int maj_elem(vector<int>v)
{
    int count=1,maj_index=0;
        for(int i=1;i<v.size();i++ )
        {
            if(v[i]==v[maj_index])
            count++;
            else
            count--;
            if(count==0)
            {
                count=1;
                maj_index=i;
            }
        }
        count=0;
        for(int i=0;i<v.size();i++)
        {
            if(v[i]==v[maj_index])
            count++;
        }
        if(count>(v.size()/2))
        return v[maj_index];
        else
        return -1;
}

main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n;cin>>n;
    while(n--)
    {
    
        int p,q;
        cin>>p;
        vector<int>v(p);
        for(int i=0;i<p;i++)
        cin>>v[i];
        cout<<maj_elem(v)<<endl;
        
       
    }
}
------------------------------------------------------------------------------

method2:
----------
#include<iostream>
#include<vector>
#include<map>
#include<algorithm>
using namespace std;
bool comp(pair<int,int>a,pair<int,int>b)
{
    return a.second<b.second;
}
main()
{
    int n;cin>>n;
    while(n--)
    {
    int k;
    cin>>k;
    map<int,int>m;
    int t;
    for(int i=0;i<k;i++)
    {
        cin>>t;
        m[t]++;
    }
    auto i=*max_element(m.begin(),m.end(),comp);
    t=i.second;
    if(t>k/2)
    cout<<i.first<<endl;
    else
    cout<<-1<<endl;
    
        
    }
}
