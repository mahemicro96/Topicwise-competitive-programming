method:1 MERGE SORT
// C++ program to Count 
// Inversions in an array 
// using Merge Sort 

#include<iostream>
#include<vector>
#include<set>
#include<algorithm>
using namespace std;

int merge(vector<int> &v,int l,int m,int h)
{
    int a,b,c=0;
    
    vector<int>temp(h-l+1);
    
    int i=l,j=m,k=0;
    while(i<m && j<=h)
    {
        if(v[j] < v[i])
      {
        c += m-i;
        temp[k++] = v[j++];
      }
      else
      {
        temp[k++] = v[i++];
      }
    }
    while(i<m)
    temp[k++]=v[i++];
    while(j<=h)
    temp[k++]=v[j++];
    for(i=l,k=0;i<=h;i++,k++)
      v[i] = temp[k];
    
    return c;
}
long long int merge_sort(vector<int> &v,int l,int h)
{
    if(l<h)
    {
        int m=(l+h)/2;
        long long int c1=merge_sort(v,l,m);
        long long int c2=merge_sort(v,m+1,h);
        long long int c3=merge(v,l,m+1,h);
        return c1+c2+c3;
    }
    return 0;
}
main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n;cin>>n;
    while(n--)
    {
    
        int m;
        cin>>m;
        vector<int>v(m);
        for(int i=0;i<m;i++)
        cin>>v[i];
        cout<<merge_sort(v,0,v.size()-1);
       
        cout<<endl;
        //for(int i=0;i<m;i++)
        //cout<<v[i];
    }
}
// This is code is contributed by rathbhupendra 
-------------------------------------------------------
method :2 using MULTISET
// A STL Set based approach for inversion count 
#include<bits/stdc++.h> 
using namespace std; 

// Returns inversion count in arr[0..n-1] 
int getInvCount(int arr[],int n) 
{ 
	// Create an empty set and insert first element in it 
	multiset<int> set1; 
	set1.insert(arr[0]); 

	int invcount = 0; // Initialize result 

	multiset<int>::iterator itset1; // Iterator for the set 

	// Traverse all elements starting from second 
	for (int i=1; i<n; i++) 
	{ 
		// Insert arr[i] in set (Note that set maintains 
		// sorted order) 
		set1.insert(arr[i]); 

		// Set the iterator to first greater element than arr[i] 
		// in set (Note that set stores arr[0],.., arr[i-1] 
		itset1 = set1.upper_bound(arr[i]); 

		// Get distance of first greater element from end 
		// and this distance is count of greater elements 
		// on left side of arr[i] 
		invcount += distance(itset1, set1.end()); 
      cout<<distance(itset1, set1.end()); 
	} 

	return invcount; 
} 

// Driver program to test above 
int main() 
{ 
	int arr[] = {8, 4, 2, 1}; 
	int n = sizeof(arr)/sizeof(int); 
	cout << "Number of inversions count are : "
		<< getInvCount(arr,n); 
	return 0; 
} 
-------------------------------------------------

