\ \ \
 \ \ \
  \ \ \
   \ \ \
simple approach:
void diagonalPrint(Node * root)
{
  queue < Node * > q;
  q.push(root);
  while (!q.empty()) {
    Node * t = q.front();
    while (t) {
      cout << t - > data << " ";
      if (t - > left)
        q.push(t - > left);
      t = t - > right;
    }
    q.pop();
  }
}
method:2 using preorder traversal and asigning 

right=d
left=d+1

void diagonalPrintUtil(Node * root, int d,

  map < int, vector < int >> & diagonalPrint)

{
  if (!root)
    return;
  diagonalPrint[d].push_back(root - > data);
  diagonalPrintUtil(root - > left, d + 1, diagonalPrint);
  diagonalPrintUtil(root - > right, d, diagonalPrint);
}
void diagonalPrint(Node * root)

{

  map < int, vector < int > > diagonalPrint;
  diagonalPrintUtil(root, 0, diagonalPrint);
  for (auto it = diagonalPrint.begin(); it != diagonalPrint.end(); ++it) {
    for (auto itr = it - > second.begin(); itr != it - > second.end(); ++itr)
      cout << * itr << ' ';
  }
}
