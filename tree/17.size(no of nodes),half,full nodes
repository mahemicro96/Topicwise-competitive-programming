1)size of a tree
void size(Node* node,int &c)
{
    if(node)
    {
        c++;
        size(node->left,c);
        size(node->right,c);
    }
}
int getSize(Node* node)
{
   // Your code here
   int c=0;
   size(node,c);
   return c;
}
-----------------------------------
Count full nodes in a Binary tree:
full nodes (Nodes which have both children as not NULL)
The idea is to use level-order traversal to solve this problem efficiently.

1) Create an empty Queue Node and push root node to Queue.
2) Do following while nodeQeue is not empty.
   a) Pop an item from Queue and process it.
      a.1) If it is full node then increment count++.
   b) Push left child of popped item to Queue, if available.
   c) Push right child of popped item to Queue, if available.
 unsigned int getfullCount(struct Node* node) 
{ 
    // If tree is empty 
    if (!node) 
        return 0; 
    queue<Node *> q; 
      
    // Do level order traversal starting from root 
    int count = 0; // Initialize count of full nodes 
    q.push(node); 
    while (!q.empty()) 
    { 
        struct Node *temp = q.front(); 
        q.pop(); 
  
        if (temp->left && temp->right) 
            count++; 
              
        if (temp->left != NULL) 
            q.push(temp->left); 
        if (temp->right != NULL) 
            q.push(temp->right); 
    } 
    return count; 
} 
---------------------------------------------
Count half nodes in a Binary tree :
 half nodes (which has only one child)
 
 The idea is to use level-order traversal to solve this problem efficiently.

1) Create an empty Queue Node and push root node to Queue.
2) Do following while nodeQeue is not empty.
   a) Pop an item from Queue and process it.
      a.1) If it is half node then increment count++.
   b) Push left child of popped item to Queue, if available.
   c) Push right child of popped item to Queue, if available.
   
 unsigned int gethalfCount(struct Node* node) 
{ 
    // If tree is empty 
    if (!node) 
        return 0; 
  
    int count = 0; // Initialize count of half nodes 
  
    // Do level order traversal starting from root 
    queue<Node *> q; 
    q.push(node); 
    while (!q.empty()) 
    { 
        struct Node *temp = q.front(); 
        q.pop(); 
  
        if (!temp->left && temp->right || 
            temp->left && !temp->right) 
            count++; 
  
        if (temp->left != NULL) 
            q.push(temp->left); 
        if (temp->right != NULL) 
            q.push(temp->right); 
    } 
    return count; 
} 
 ----------------------------------------------------------
 how do you remove all the half nodes?
 Then for each node,

    if it has two children or it is a leaf node, nothing needs to be done.
    if it has exactly one child, we delete it and replace the node by the child node.
    
 bool isLeaf(Node* node)
{
    return (node->left == nullptr && node->right == nullptr);
}
 
// Function to convert a binary tree to full tree by removing half nodes
// i.e. remove nodes having one children
Node* truncate(Node* root)
{
    // base case: empty tree
    if (root == nullptr)
        return nullptr;
 
    // recursively truncate the left subtree and subtree first
    root->left = truncate(root->left);
    root->right = truncate(root->right);
 
    // if current node has two children or it is leaf node,
    // nothing needs to be done
    if ((root->left && root->right) || isLeaf(root))
        return root;
 
    // if current node has exactly one child, then delete it and replace
    // the node by the child node
    Node* child = (root->left) ? root->left: root->right;
    delete root;
    return child;
}
 
