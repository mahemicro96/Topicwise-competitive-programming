method:using map
void getVerticalOrder(Node* root, int hd, map<int, vector<int>> &m) 
{ 
    // Base case 
    if (root == NULL) 
        return; 
    m[hd].push_back(root->data); 
    getVerticalOrder(root->left, hd-1, m); 
    getVerticalOrder(root->right, hd+1, m); 
} 
void verticalOrder(Node *root)
{
    map < int,vector<int> > m; 
    int hd = 0; 
    getVerticalOrder(root, hd,m); 
    map< int,vector<int> > :: iterator it; 
    for (it=m.begin(); it!=m.end(); it++) 
    { 
        //for make vector value in decinding order
        sort(it->second.begin(),it->second.end(),greater<int>());
        for (int i=0; i<it->second.size(); ++i) 
            cout << it->second[i] << " "; 
        //cout << endl; 
    } 
}

using level order:
void printVerticalOrder(Node * root) {
  // Base case 
  if (!root)
    return;

  map < int, vector < int > > m;
  int hd = 0;
  queue < pair < Node * , int > > que;
  que.push(make_pair(root, hd));

  while (!que.empty()) {

    pair < Node * , int > temp = que.front();
    que.pop();
    hd = temp.second;
    Node * node = temp.first;
    m[hd].push_back(node - > key);

    if (node - > left != NULL)
      que.push(make_pair(node - > left, hd - 1));
    if (node - > right != NULL)
      que.push(make_pair(node - > right, hd + 1));
  }

  map < int, vector < int > > ::iterator it;
  for (it = m.begin(); it != m.end(); it++) {
    for (int i = 0; i < it - > second.size(); ++i)
      cout << it - > second[i] << " ";
    cout << endl;
  }
}
