method:using map and preorder traversal
NOTE:here the program for vertical traversal left to right.if we need verical 
traversal right to left we need to pass:
getVerticalOrder(root->left, hd+1, m); 
getVerticalOrder(root->right, hd-1, m); 


void getVerticalOrder(Node* root, int hd, map<int, vector<int>> &m) 
{ 
    // Base case 
    if (root == NULL) 
        return; 
    m[hd].push_back(root->data); 
    getVerticalOrder(root->left, hd-1, m); 
    getVerticalOrder(root->right, hd+1, m); 
} 
void verticalOrder(Node *root)
{
    map < int,vector<int> > m; 
    int hd = 0; 
    getVerticalOrder(root, hd,m); 
    map< int,vector<int> > :: iterator it; 
    for (it=m.begin(); it!=m.end(); it++) 
    { 
        //for make vector value in decinding order
        sort(it->second.begin(),it->second.end(),greater<int>());
        for (int i=0; i<it->second.size(); ++i) 
            cout << it->second[i] << " "; 
        //cout << endl; 
    } 
}

using map and level order:
--------------------------

NOTE:here the program for vertical traversal left to right.if we need verical 
traversal right to left we need to pass:
q.push(make_pair(k+1, p - > left));q.push(make_pair(k-1, p - > right));

void verticalOrder(Node * root) {
   map < int, vector < int > > m;
   int hd = 0;
   queue < pair < int, Node * >> q;
   q.push(make_pair(hd, root));
   while (q.size()) {
      pair < int, Node * > t = q.front();
      int k = t.first;
      Node * p = t.second;
      q.pop();
      m[k].push_back(p - > data);
      if (p - > left)
         q.push(make_pair(k - 1, p - > left));
      if (p - > right)
         q.push(make_pair(k + 1, p - > right));
   }
   for (auto i = m.begin(); i != m.end(); i++) {
      for (int j = 0; j < i - > second.size(); j++)
         cout << i - > second[j] << " ";
   }
}
