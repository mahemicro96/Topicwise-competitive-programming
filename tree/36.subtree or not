bool areIdentical(node * root1, node *root2) 
{ 
	/* base cases */
	if (root1 == NULL && root2 == NULL) 
		return true; 

	if (root1 == NULL || root2 == NULL) 
		return false; 
	return (root1->data == root2->data && 
			areIdentical(root1->left, root2->left) && 
			areIdentical(root1->right, root2->right) ); 
} 

bool isSubtree(node *T, node *S) 
{ 
	/* base cases */
	if (S == NULL) 
		return true; 
	if (T == NULL) 
		return false; 

	if (areIdentical(T, S)) 
		return true; 
	return isSubtree(T->left, S) || 
		isSubtree(T->right, S); 
} 
TC:O(N*M)
method:2
------------
using preorder and inorder traversal

void storeInorder(Node* root, char arr[], int& i) 
{ 
	if (root == NULL) { 
		arr[i++] = '$'; 
		return; 
	} 
	storeInorder(root->left, arr, i); 
	arr[i++] = root->key; 
	storeInorder(root->right, arr, i); 
} 

void storePreOrder(Node* root, char arr[], int& i) 
{ 
	if (root == NULL) { 
		arr[i++] = '$'; 
		return; 
	} 
	arr[i++] = root->key; 
	storePreOrder(root->left, arr, i); 
	storePreOrder(root->right, arr, i); 
} 

bool isSubtree(Node* T, Node* S) 
{ 
	/* base cases */
	if (S == NULL) 
		return true; 
	if (T == NULL) 
		return false; 

	int m = 0, n = 0; 
	char inT[MAX], inS[MAX]; 
	storeInorder(T, inT, m); 
	storeInorder(S, inS, n); 
	inT[m] = '\0', inS[n] = '\0'; 


	if (strstr(inT, inS) == NULL) 
		return false; 


	m = 0, n = 0; 
	char preT[MAX], preS[MAX]; 
	storePreOrder(T, preT, m); 
	storePreOrder(S, preS, n); 
	preT[m] = '\0', preS[n] = '\0'; 

	return (strstr(preT, preS) != NULL); 
} 
TC:O(N)
