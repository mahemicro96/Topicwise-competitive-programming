method:2(using postOrder recursion)

/* Program to check children sum property */
#include <bits/stdc++.h> 
using namespace std; 

/* A binary tree node has data, left 
child and right child */
struct node 
{ 
	int data; 
	struct node* left; 
	struct node* right; 
}; 

/* returns 1 if children sum property holds 
for the given node and both of its children*/

	int checkChildrenSum(struct node* root)
{
    if(!root)
    return 0;
    else
    {
        int lh=checkChildrenSum(root->left);
        int rh=checkChildrenSum(root->right);
        int x=lh+rh;
        if((lh!=0 || rh!=0)&& x!=root->data)
        return false;
        return root->data;
    }
}

/* 
Helper function that allocates a new node 
with the given data and NULL left and right 
pointers. 
*/
struct node* newNode(int data) 
{ 
	struct node* node = 
		(struct node*)malloc(sizeof(struct node)); 
	node->data = data; 
	node->left = NULL; 
	node->right = NULL; 
	return(node); 
} 

// Driver Code 
int main() 
{ 
	struct node *root = newNode(10); 
	root->left	 = newNode(8); 
	root->right = newNode(2); 
	root->left->left = newNode(3); 
	root->left->right = newNode(5); 
	root->right->right = newNode(2); 
	if(checkChildrenSum(root)) 
		cout << "The given tree satisfies "
			<< "the children sum property "; 
	else
		cout << "The given tree does not satisfy "
			<< "the children sum property "; 

	getchar(); 
	return 0; 
} 
// This code is contributed by Akanksha Rai 
