int height(Tree *root)
{
    int lefth,righth;
    if(root==NULL)
    {
        return 0;
    }
    else
    {
        lefth=height(root->left);
        righth=height(root->right);
        if(lefth>righth)
        return lefth+1;
        else
        return righth+1;
    }
}
-----------------------------------------------
Tree *search(Tree *root,int x)
{
    if(root==NULL)
    return NULL;
    else
    {
       // cout<<root->data<<" ";
    if(root->data==x)
    {
    return root;
    }
     Tree *m=search(root->left,x);
    Tree *n=search(root->right,x);
    if(m!=NULL)
    return m;
    if(n!=NULL)
    return n;
    else return NULL;
    }
   
}
--------------------------------------------
int countLeaves(Node* root)
{
  // Your code here
 if(root)
  {
      if(root->left==NULL&&root->right==NULL)
      return 1;
      return countLeaves(root->left)+countLeaves(root->right);
  }
}
---------------------------------------------------
int countNonleaf(struct Node* root) 
{ 
    
    if (root == NULL || (root->left == NULL &&  
                         root->right == NULL)) 
        return 0; 
  
   
    return 1 + countNonleaf(root->left) +  
               countNonleaf(root->right); 
} 
-------------------------------------------------------
best approach(understandable approach)
for count leaf :
***************
void count(Node* root,int &c)
   {
       if(root)
       {
           if(root->left==NULL && root->right==NULL)
           c++;
           if(root->left)
           count(root->left,c);
           if(root->right)
           count(root->right,c);
       }
   }
int countLeaves(Node* root)
{
  // Your code here
  int c=0;
  count(root,c);
  return c;
}

for count non-leaf:
*******************
void count1(Node *root,int &c)
{
    if(root)
    {
        if(root->left||root->right)
         c++;
        if(root->left)
        count1(root->left,c);
        if(root->right)
        count1(root->right,c);
        
        
    }
}
int countNonLeafNodes(Node* root)
{
    // Code here
    int c=0;
    count1(root,c);
    return c;
    
}
------------------------------
