b/w 2 trees:
---------------
using recursive:
----------
time:Complexity of the identicalTree() will be according to the tree with lesser number of nodes.
Let number of nodes in two trees be m and n then complexity of sameTree() is O(m) where m < n.
*******
bool isIdentical(Node *r1, Node *r2)
{
    //Your Code here
    if(r1==NULL && r2==NULL)
    return 1;
    if(r1==NULL||r2==NULL)
    return 0;
    if(r1->data!=r2->data)
    return 0;
    return isIdentical(r1->left,r2->left)&&isIdentical(r1->right,r2->right);
}
using level order:
---------------
time:Time complexity of above solution is O(n + m) where m and n are number of nodes in two trees.
bool areIdentical(Node *root1, Node *root2) 
{ 
    
    if (root1  && root2) return true; 
  
    if (root1 || root2)  return false; 
    queue<Node *> q1, q2; 
    q1.push(root1); 
    q2.push(root2); 
  
    while (!q1.empty() && !q2.empty()) 
    { 
        Node *n1 = q1.front(); 
        Node *n2 = q2.front(); 
  
        if (n1->data != n2->data) 
           return false; 
        q1.pop(), q2.pop(); 
        if (n1->left && n2->left) 
        { 
            q1.push(n1->left); 
            q2.push(n2->left); 
        } 
        else if (n1->left || n2->left) 
            return false; 
        if (n1->right && n2->right) 
        { 
            q1.push(n1->right); 
            q2.push(n2->right); 
        } 
        else if (n1->right || n2->right) 
            return false; 
    } 
  
    return true; 
} 
