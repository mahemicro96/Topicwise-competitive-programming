method:1(using level,vertical) for top ,bottom view
--------------------------------------------------------
void topView(struct Node *root)
{
    map<int,vector<int>>m;
    queue<pair<Node*,int>>q;
    int h=0;
    q.push(make_pair(root,h));
    while(q.size())
    {
        pair<Node*,int>t=q.front();
        q.pop();
        Node *p=t.first;
        int k=t.second;
        m[k].push_back(p->data);
        if(p->left)
        q.push(make_pair(p->left,k-1));
        if(p->right)
        q.push(make_pair(p->right,k+1));
        
    }
    for(auto i=m.begin();i!=m.end();i++)
        cout<<i->second[0]<<" ";//top view
        /*bottom view:
        for(auto i=m.begin();i!=m.end();i++)
    {
        int u=i->second.size();
        cout<<i->second[u-1]<<" ";
    }
        */
        
}
method 2:(using preorder,vertical traversal) for bottom view
------------------------------------------------------------
map<int,vector<int>>m;
void fill(Node *root,int i)
{
    if(root==NULL)
    return;
    m[i].push_back(root->data);
    fill(root->left,i-1);
    fill(root->right,i+1);
    
}
void bottomView(Node *root)
{
   fill(root,0);
   for(auto it=m.begin();it!=m.end();it++)
   {
       cout<<it->second[(it->second).size()-1]<<" ";
   }
   
   m.clear();
   
}
