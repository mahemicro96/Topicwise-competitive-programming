#include<iostream>
#include<vector>
#include<list>
#include<algorithm>
using namespace std;
void lcs(string s,string t)
{
    int p=s.length()+1;
    int q=t.length()+1;
    int arr[p][q];
    
    int r=0;
    for(int i=0;i<p;i++)
    {
        for(int j=0;j<q;j++)
        {
            if(i==0||j==0)
            arr[i][j]=0;
            else if(s[i-1]==t[j-1])
            {
                arr[i][j]=arr[i-1][j-1]+1;
            r=max(arr[i][j],r);
            }
            else
            arr[i][j]=0;
        }
    }
    cout<<r;
}
main()
{
    int n;cin>>n;
    while(n--)
    {
    int a,b;
    cin>>a>>b;
    string s,t;
    cin>>s>>t;
    lcs(s,t);
    cout<<endl;
    }
}
-------------------------------
reduse space complexity:
string LCS(string x,string y,int n,int m)
{
	int dp[2][m+1];
	memset(dp,0,sizeof dp);
 
	int b,mxlen=0,end=0;
	for(int i=1;i<=n;i++){
		b = i&1;
		memset(dp[b],0,sizeof(dp[b]));   // need to clear in every iteration 
		for(int j=1;j<=m;j++)
		{
			if(x[i-1]==y[j-1])
			{
				dp[b][j] = dp[1-b][j-1]+1;
				if(mxlen < dp[b][j])
				{
					mxlen = dp[b][j];
					end = i;
				}
			}
		}
	}
	return x.substr(end-mxlen,mxlen);
}
