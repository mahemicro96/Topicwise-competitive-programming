note:

vector<int> arr[v];
	It displays an array of vector, each array[i] would have a vector stored in it that can traverse through many values. 
	It is like a an Array of Linked List where the heads are only stored in array[i] positions.

vector<vector<int> > arr vs vector<int> arr[v]
	The difference between 2D Vector and an Array of Vector is that 2D Vectors can span in size while array of vectors 
	have their dimension fixed for the array size.

vector<vector<int>>arr(v) ===vector<int> arr[v]
both can be used to represent the graph as adjecency list

method:1(prefered)

// A simple representation of graph using STL
#include<bits/stdc++.h>
using namespace std;

// A utility function to add an edge in an
// undirected graph.
void addEdge(vector<int> adj[], int u, int v)
{
    adj[u].push_back(v);
    adj[v].push_back(u);
}

// A utility function to print the adjacency list
// representation of graph
void printGraph(vector<int> adj[], int V)
{
    for (int v = 0; v < V; ++v)
    {
       for(int i=0;i<adj[v].size();i++)
       {
       	cout<<adj[v][i]<<" ";
	   }
        printf("\n");
    }
}

// Driver code
int main()
{
    int V = 5;
    vector<int> adj[V];
    addEdge(adj, 0, 1);
    addEdge(adj, 0, 4);
    addEdge(adj, 1, 2);
    addEdge(adj, 1, 3);
    addEdge(adj, 1, 4);
    addEdge(adj, 2, 3);
    addEdge(adj, 3, 4);
    printGraph(adj, V);
    return 0;
}

------------------------------------------------
mehtod:2(using 2d variable sized vector array)

// A simple representation of graph using STL
#include<bits/stdc++.h>
using namespace std;

void addEdge(vector<vector<int>> &adj, int u, int v)
{
    adj[u].push_back(v);
    adj[v].push_back(u);
}

void printGraph(vector<vector<int>> &adj, int V)
{
    for (int v = 0; v < adj.size(); ++v)
    {
       for(int i=0;i<adj[v].size();i++)
       {
       	cout<<adj[v][i]<<" ";
	   }
        printf("\n");
    }
}
int main()
{
    int V = 5;
    vector<vector<int>> adj(V);
    addEdge(adj, 0, 1);
    addEdge(adj, 0, 4);
    addEdge(adj, 1, 2);
    addEdge(adj, 1, 3);
    addEdge(adj, 1, 4);
    addEdge(adj, 2, 3);
    addEdge(adj, 3, 4);
    printGraph(adj, V);
    return 0;
}
output:
1 4
0 2 3 4
1 3
1 2 4
0 1 3

