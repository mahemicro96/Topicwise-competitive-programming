using BFS with indegree(prefered)
---------------------------------------
bool Graph::isCyclic(int v)
{
    
    bool result=false;
    int indegree[v]={0},counter=0;
    for(int i=0;i<v;i++)
    {
        for(auto it= adj[i].begin();it!=adj[i].end();++it)
        indegree[*it]++;
    }
    queue<int >q;
    for(int i=0;i<v;i++)
        {
            if(indegree[i]==0)
            q.push(i);
        }
    while(!q.empty())
    {
        int temp=q.front();
        q.pop();counter++;
        for(auto it=adj[temp].begin();it!=adj[temp].end();++it)
        {
            indegree[*it]--;
            if(indegree[*it]==0)
            q.push(*it);
        }
        
        
    }
    return counter!=v;
}





-------------------------------------------
using DFS:



bool isCycleUtil(int i,vector<int>adj[],bool visited[],bool recstack[])
{
    if(visited[i]==false)
    {
        visited[i]=true;
        recstack[i]=true;
        for(auto j=adj[i].begin();j!=adj[i].end();j++)
        {
            if(visited[*j]==false && isCycleUtil(*j,adj,visited,recstack))
            return true;
            else if(recstack[*j])
            return true;
        }
    }
    recstack[i]=false;
    return false;
}
bool isCyclic(int V, vector<int> adj[])
{
    bool visited[V];
    bool recstack[V];
    memset(visited,false,V);
    memset(recstack,false,V);
    for(int i=0;i<V;i++)
    {
        if(isCycleUtil(i,adj,visited,recstack))
        return true;
    }
    return false;
}
