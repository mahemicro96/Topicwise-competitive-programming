Constraints:
1 <= T <= 100
1 <= N <= 1000
1 <= knight_pos(X, Y), targer_pos(X, Y) <= N

// User function template for C++

// KnightPos : knight position coordinates
// targetPos : target position coordinated
// N : square matrix size
struct kni{
    int a,b,step;
};
int minStepToReachTarget(int knightPos[], int targetPos[], int N) {
  vector<vector<bool>>visit(N+1,vector<bool>(N+1,false));
  queue<kni>q;
  struct kni k1;
  k1.a=knightPos[0];
  k1.b=knightPos[1];
  k1.step=0;
  q.push(k1);
  visit[k1.a][k1.b]=true;
  int row[]={2,2,1,1,-1,-1,-2,-2};
  int col[]={-1,1,-2,2,-2,2,-1,1};
  while(!q.empty())
  {
      struct kni k2=q.front();
      q.pop();
      if(k2.a==targetPos[0]&&k2.b==targetPos[1])
      return k2.step;
      for(int i=0;i<8;i++)
      {
          int rr=k2.a+row[i];
          int cc=k2.b+col[i];
          if(rr>=1&&cc>=1&&rr<=N&&cc<=N&&visit[rr][cc]==false)
          {
              visit[rr][cc]=true;
              struct kni k3;
              k3.a=rr;
              k3.b=cc;
              k3.step=k2.step+1;
              q.push(k3);
          }
      }
  }
  return -1;
  }
  
  -------------------------------------------------------------------------
  
  n*m grid same approach
  Given a chess board of order N x M and source points (s1, s2) and 
  destination points (d1, d2). The task to find minimum number of moves required by the Knight to go to the destination cell.

Input:
The first line of input contains an integer T denoting the number of testcases.
Then T test cases follow. Each test case contains two lines. The first line of each testcase contains two space 
separated integers N and M. Then in the next line are four space separated values s1, s2 and d1, d2.

Output:
For each testcase in a new line print the minimum number of moves required by the knight to go to the destination
from the source. If no such move is possible print -1.

Constraints:
1 <= T <= 100
1 <= N, M <= 25

#include<iostream>
#include<queue>
using namespace std;
typedef pair<int,int> pr;
int Helper(int n,int m,int s1,int s2,int d1,int d2){
    if(s1==d1 && s2==d2) return 0;
    queue<pr> q;
    q.push({s1,s2});
    q.push({-1,-1});
    int moves=0;
    int d[8][2]={{1,2},{-1,2},{1,-2},{-1,-2},{2,1},{-2,1},{2,-1},{-2,-1}};
    bool visited[n][m];
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++)
            visited[i][j]=0;
    }
    visited[s1][s2]=1;
    while(!q.empty()){
        pr p=q.front();
        q.pop();
        if(p.first==-1){
            if(!q.empty()) q.push({-1,-1}),moves++;
            continue;
        }
        if(p.first==d1 && p.second==d2){
            return moves;
        }
        for(int k=0;k<8;k++){
            int x=p.first+d[k][0],y=p.second+d[k][1];
            if(x>=0 && x<n && y>=0 && y<m && !visited[x][y]) q.push({x,y}),visited[x][y]=1;
        }
    }
    return -1;
}
int main()
 {
	//code
	int t;
	cin>>t;
	while(t--){
	    int n,m,s1,s2,d1,d2;
	    cin>>n>>m>>s1>>s2>>d1>>d2;
	    s1--,s2--,d1--,d2--;
	    cout<<Helper(n,m,s1,s2,d1,d2)<<endl;
	}
	return 0;
}
