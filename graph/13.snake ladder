Input:
The first line of input contains an integer T denoting the no of test cases. 
Then T test cases follow. Each test case contains two lines. The first line of input contains an integer N 
denoting the no of ladders and snakes present. Then in the next line are 2*N space separated values a,b which 
denotes a ladder or a snake at position 'a' which takes to a position 'b'.

Output:
For each test case in a new line print the required answer denoting the min no of dice throws.

Constraints:
1 <= T <= 100
1 <= N <= 10
1 <= a <= 30
1 <= b <= 30

Example:
Input:
2
6
11 26 3 22 5 8 20 29 27 1 21 9
1
2 30

Output:
3
1

Explanation:
Testcase 1:
For 1st throw get a 2, which contains ladder to reach 22
For 2nd throw get a 6, which will lead to 28
Finally get a 2, to reach at the end 30. Thus 3 dice throws required to reach 30.

#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
#define M 30
using namespace std;

struct lad{
    int ind,dis;
};
int snake(vector<int>&moves)
{
    queue<lad>q;
    vector<bool>visit(M,false);
    struct lad l1;
    l1.ind=0;
    l1.dis=0;
    q.push(l1);
    visit[0]=true;
     struct lad l2;
    while(!q.empty())
    {
        l2=q.front();
        q.pop();
        if(l2.ind==(M-1))
        return l2.dis;
        for(int k=(l2.ind+1);k<=(l2.ind+6) && k<M;k++)
        {
            if(visit[k]==false)
            {
               
                visit[k]=true;
                struct lad l3;
                l3.dis=l2.dis+1;
                if(moves[k]!=-1)
                {
                    l3.ind=moves[k];
                }
                else{
                    l3.ind=k;
                }
                q.push(l3);
            }
           
            
        }
        
    }
    return -1;
}
main()
{
    int n;cin>>n;
    while(n--)
    {
        int N;
        cin>>N;
        vector<int>moves(M,-1);
        int a,b;
        for(int i=0;i<(N);i++)
        {
            cin>>a>>b;
            moves[a-1]=b-1;
        }
      
        cout<<snake(moves)<<endl;
    
        
    }
}
