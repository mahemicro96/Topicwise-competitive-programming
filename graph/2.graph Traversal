BFS:
vector <int> bfs(vector<int> g[], int N) {
    vector<int>ans;
    vector<bool>visited(N,false);
    queue<int>q;
    q.push(0);
    visited[0]=true;
    while(!q.empty())
    {
        int x=q.front();
        q.pop();
        ans.push_back(x);
        for(auto i=g[x].begin();i!=g[x].end();i++)
        {
            if(visited[*i]==false)
            {
                visited[*i]=true;
                q.push(*i);
            }
        }
     }
        return ans;
}
    
-----------------------------------------------------------
DFS:
A)RECURSIVE:
void dfsutil(vector<int>g[],bool visited[],int s,vector<int>&ans)
{
    visited[s]=true;
    ans.push_back(s);
    for(auto i=g[s].begin();i!=g[s].end();i++)
    {
        if(visited[*i]==false)
        dfsutil(g,visited,*i,ans);
    }
}

vector <int> dfs(vector<int> g[], int N)
{
    vector<int>ans;
    bool visited[N];
    memset(visited,false,N);
    int s=0;
    dfsutil(g,visited,s,ans);
    return ans;
    
    
}
