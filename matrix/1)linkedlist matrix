
Node* constructLinkedMatrix(int mat[MAX][MAX], int n)
{
    Node* m[n][n];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            m[i][j] = newNode(mat[i][j]);
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i == n - 1 && j != n - 1) {
                m[i][j]->down = NULL;
                m[i][j]->right = m[i][j + 1];
            }
            else if (j == n - 1 && i != n - 1) {
                m[i][j]->right = NULL;
                m[i][j]->down = m[i + 1][j];
            }
            else if (i != n - 1 && j != n - 1) {
                m[i][j]->right = m[i][j + 1];
                m[i][j]->down = m[i + 1][j];
            }
        }
    }
    return m[0][0];
}
---------------------------------------
USING RECURSION:
Node* construct(int arr[][3], int i, int j,  
                              int m, int n) 
{ 
    // return if i or j is out of bounds 
    if (i > n - 1 || j > m - 1) 
        return NULL; 
  
    // create a new node for current i and j 
    // and recursively allocate its down and 
    // right pointers 
    Node* temp = new Node(); 
    temp->data = arr[i][j]; 
    temp->right = construct(arr, i, j + 1, m, n); 
    temp->down  = construct(arr, i + 1, j, m, n); 
    return temp; 
} 
m,n is m*n matrix
