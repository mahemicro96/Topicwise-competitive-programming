// A Recursive C program to solve minimum sum partition 
// problem. 
#include <bits/stdc++.h> 
using namespace std; 

// Returns the minimum value of the difference of the two arrs. 
int findMin(int arr[], int n) 
{ 
	// Calculate sum of all elements 
	int sum = 0; 
	for (int i = 0; i < n; i++) 
		sum += arr[i]; 
		int sum1=sum;
  sum =sum/2;

	bool dp[n+1][sum+1]; 
	
	for (int i = 0; i < n+1; i++) { 
		for (int j = 0; j < sum+1; j++) { 
          if(i==0 || j==0 )
          {
          if(i==0)
            dp[i][j]=false;
          if(j==0)
            dp[i][j]=true;
          }
          else
          {
          
			if (j < arr[i - 1]) 
				dp[i][j] = dp[i - 1][j]; 
			if (j >= arr[i - 1]) 
				dp[i][j] = dp[i - 1][j] 
							|| dp[i - 1][j - arr[i - 1]]; 
          }
		} 
	} 


	int diff = INT_MAX; 
	for (int j=sum; j>=0; j--) 
	{ 
		// Find the 
		if (dp[n][j] == true) 
		{ 
		   
			 int s2=sum1-j;
			 diff=abs(j-s2);
			break; 
		} 
	} 
	return diff; 
} 

// Driver program to test above function 
int main() 
{ 
	int arr[] = {1,2,3,5,13}; 
	int n = sizeof(arr)/sizeof(arr[0]); 
	cout << "The minimum difference between 2 arrs is "
		<< findMin(arr, n); 
	return 0; 
} 
