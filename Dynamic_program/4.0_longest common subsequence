recursive:
----------------
// of LCS of two strings 
#include <bits/stdc++.h> 
using namespace std; 
  
// Returns length of LCS for X[0..m-1], Y[0..n-1] 
int lcs(string X, string Y, int m, int n) 
{ 
    if (m == 0 || n == 0) 
        return 0; 
  
    if (X[m - 1] == Y[n - 1]) 
        return 1 + lcs(X, Y, m - 1, n - 1); 
    else
        return max(lcs(X, Y, m, n - 1), 
                   lcs(X, Y, m - 1, n)); 
} 
  
// Driver Code 
int main() 
{ 
    string X = "AGGTAB"; 
    string Y = "GXTXAYB"; 
  
    // Find the length of string 
    int m = X.length(); 
    int n = Y.length(); 
  
    cout << "Length of LCS: " << lcs(X, Y, m, n); 
  
    return 0; 
} 
 This solution is exponential in term of time complexity. The general recursive solution of the problem is to generate all
 subsequences of both given sequences and find the longest matching subsequence.
 Total possible combinations will be 2n. Hence recursive solution will take O(2n).
memoization:
-----------------
const int maximum = 1000; 

int lcs(string X, string Y, int m, int n, int dp[][maximum]) 
{ 
    // base case 
    if (m == 0 || n == 0) 
        return 0; 
  
    // if the same state has already been 
    // computed 
    if (dp[m - 1][n - 1] != -1) 
        return dp[m - 1][n - 1]; 
   
    if (X[m - 1] == Y[n - 1]) { 
  
        dp[m - 1][n - 1] = 1 + lcs(X, Y, m - 1, n - 1, dp); 
  
        return dp[m - 1][n - 1]; 
    } 
    else { 
        dp[m - 1][n - 1] = max(lcs(X, Y, m, n - 1, dp), 
                               lcs(X, Y, m - 1, n, dp)); 
  
        return dp[m - 1][n - 1]; 
    } 
} 
  
// Driver Code 
int main() 
{ 
  
    string X = "AGGTAB"; 
    string Y = "GXTXAYB"; 
    int m = X.length(); 
    int n = Y.length(); 
  
    int dp[m][maximum]; 
  
    // assign -1 to all positions 
    memset(dp, -1, sizeof(dp)); 
  
    cout << "Length of LCS: " << lcs(X, Y, m, n, dp); 
  
    return 0; 
}
Time Complexity: O(N * M), where N and M is length of the first and second string respectively.
Auxiliary Space: (N * M)
dynamic programming:
----------------------
int lcs( char *X, char *Y, int m, int n )  
{  
    int L[m + 1][n + 1];  
    int i, j;  
      
    for (i = 0; i <= m; i++)  
    {  
        for (j = 0; j <= n; j++)  
        {  
        if (i == 0 || j == 0)  
            L[i][j] = 0;  
      
        else if (X[i - 1] == Y[j - 1])  
            L[i][j] = L[i - 1][j - 1] + 1;  
      
        else
            L[i][j] = max(L[i - 1][j], L[i][j - 1]);  
        }  
    }  
    
    return L[m][n];  
}  
  tc:o(m)(n)
