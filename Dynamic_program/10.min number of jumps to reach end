without dp:o(n)
----------------
#include<iostream>
#include<vector>
#include<list>
#include<algorithm>
using namespace std;
int solve(int arr[] , int n ){
    int maxReachable , jumps  , stepsPossible ;  
if(arr[0]==0)
return -1;
    maxReachable = arr[0] ; 
    jumps = 1 ; 
    stepsPossible = arr[0] ; 

    for(int i = 1 ; i<n ; i++){
        if(i==n-1) return jumps ;  
        
        maxReachable = max(maxReachable , i+arr[i]);

        stepsPossible-- ; 

        if(stepsPossible==0){
            jumps++ ; 
            if(i>=maxReachable) return -1;
            stepsPossible = maxReachable - i ; 
        }
    }

}

main()
{
    int n;cin>>n;
    while(n--)
    {
    int x;
    cin>>x;
    int v[x];
    for(int i=0;i<x;i++)
    cin>>v[i];
    cout<<solve(v,x);
    cout<<endl;
    
        
    }
}




---------------------------------------------------
dp:
// https://www.youtube.com/watch?v=hGVDAQAuJnI&t=216s

int solveTopDown( int i  , int arr[] , int n){
    if(mem[i]>0) return mem[i] ; 
    if(i>=n) return  INT_MAX ; 
    if(i==n-1) return 0;

    int steps = arr[i] ;
    int minvalue = INT_MAX ; 
    
    for(int j=1 ; j<=steps ;j++){
        minvalue = min(minvalue ,solveTopDown(i+j , arr , n));
    }
    mem[i] =  minvalue + 1 ; 
    return mem[i] ; 
}


int main(void){
    int N = 11 ; 
    int arr[100] = {1,3,5,8,9,2,6,7,6,8,9};
    cout<<solveTopDown(0 , arr , N) <<endl; 
}
