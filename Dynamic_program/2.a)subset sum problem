method:0(recursion)
// A recursive solution for subset sum problem 
#include <stdio.h> 

// Returns true if there is a subset 
// of set[] with sum equal to given sum 
bool isSubsetSum(int set[], int n, int sum) 
{ 
	// Base Cases 
	if (sum == 0) 
		return true; 
	if (n == 0 && sum != 0) 
		return false; 

	if (set[n - 1] > sum) 
		return isSubsetSum(set, n - 1, sum); 

	return isSubsetSum(set, n - 1, sum) 
		|| isSubsetSum(set, n - 1, sum - set[n - 1]); 
} 

// Driver program to test above function 
int main() 
{ 
	int set[] = { 3, 34, 4, 12, 5, 2 }; 
	int sum = 9; 
	int n = sizeof(set) / sizeof(set[0]); 
	if (isSubsetSum(set, n, sum) == true) 
		printf("Found a subset with given sum"); 
	else
		printf("No subset with given sum"); 
	return 0; 
} 
---------------------------------
method:1(dp)
---------------
bool isSubsetSum(int set[], int n, int sum) 
{ 
	
	bool subset[n + 1][sum + 1]; 


	for (int i = 0; i < n+1; i++) { 
		for (int j = 0; j < sum+1; j++) { 
		if(i==0||j==0)
		{
          if(i==0)
            subset[i][j]=false;
          if(j==0)
            subset[i][j]=true;
	    }
          else
          {
          
			if (j < set[i - 1]) 
				subset[i][j] = subset[i - 1][j]; 
			if (j >= set[i - 1]) 
				subset[i][j] = subset[i - 1][j] 
							|| subset[i - 1][j - set[i - 1]]; 
          }
		} 
	} 



	return subset[n][sum]; 
} 
