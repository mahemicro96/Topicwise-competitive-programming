class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum=0;
        for(int i=0;i<nums.size();i++)
            sum=sum+nums[i];
        if(sum%2==1)
            return false;
        sum=sum/2;
        int n=nums.size();
        bool mat[n+1][sum+1];
        for(int j=0;j<sum+1;j++)
            mat[0][j]=false;
        mat[0][0]=true;
        for(int i=1;i<n+1;i++)
            for(int j=0;j<sum+1;j++)
            {
                if(nums[i-1]<=j)
                    mat[i][j]=mat[i-1][j]||mat[i-1][j-nums[i-1]];
                else if(nums[i-1]>j)
                    mat[i][j]=mat[i-1][j];
            }
            
        return mat[n][sum];
    }
};


----------------------------
using memoization:
#include <bits/stdc++.h>
using namespace std;
bool dp[10000][10000];
bool subset(int arr[],int n,int sum)
{
    if(sum==0)
    return true;
    if(n==0 and sum!=0)
    return false;
    if(dp[n][sum]!=NULL)
    return dp[n][sum];
    if(sum<arr[n-1])
    return dp[n][sum]=subset(arr, n-1,sum);
    else
    return dp[n][sum]=subset(arr, n-1,sum-arr[n-1])||subset(arr, n-1,sum);
}
int main() {
    int t;
    cin>>t;
    while(t--)
    {
      int n;
      cin>>n;
      int arr[n];
      int sum=0;
      for(int i=0;i<n;i++)
      {
          cin>>arr[i];
          sum+=arr[i];
      }
   
      if(sum%2!=0)
      cout<<"NO"<<endl;
      else
      {
          sum=sum/2;
          memset(dp,NULL,sizeof(dp));
          if(subset(arr,n,sum))
          cout<<"YES"<<endl;
          else
          cout<<"NO"<<endl;
      }
      
    }
	return 0;
}
