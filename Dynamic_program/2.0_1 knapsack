method:1(using recursion)(TLE PROBLEM)
-------------------------------
#include<iostream>
#include<vector>
#include<list>
#include<algorithm>
using namespace std;
int knapsack(vector<int>wt,vector<int>val,int cap,int n)
{
    if(n==0||cap==0)
    return 0;
    if(wt[n-1]<=cap)
    {
        return max(val[n-1]+knapsack(wt,val,cap-wt[n-1],n-1),knapsack(wt,val,cap,n-1));
    }
    else if(wt[n-1]>cap)
    {
        return knapsack(wt,val,cap,n-1);
    }
}
main()
{
    int x;cin>>x;
    while(x--)
    {
    int n,cap;
    cin>>n>>cap;
    vector<int>val(n);
    vector<int>wt(n);
    for(int i=0;i<n;i++)
    cin>>val[i];
    for(int i=0;i<n;i++)
    cin>>wt[i];
    cout<<knapsack(wt,val,cap,n)<<endl;
        
    }
}
------------------------------------------------------
method:2(memoization)
--------------
#include<bits/stdc++.h>
using namespace std;
int t1[1002][1002];
int  knapsack(int w1[],int val[],int w,int n)
{
    if(n==0 || w==0)
    return 0;
    if(t1[n][w]!=-1)
    return t1[n][w];
    if(w1[n-1]<=w)
    return t1[n][w]=max((val[n-1]+knapsack(w1,val,w-w1[n-1],n-1)),knapsack(w1,val,w,n-1));
    else if(w1[n-1]>w)
    return t1[n][w]=knapsack(w1,val,w,n-1);
}
int main()
{
int t;
cin>>t;
while(t--)
{
    memset(t1,-1,sizeof(t1));
    int n;
    cin>>n;
    int w;
    cin>>w;
int w1[n]={0};
int val[n]={0};
for(int i=0;i<n;i++)
    cin>>w1[i];
    for(int i=0;i<n;i++)
    cin>>val[i];
cout<<knapsack(val,w1,w,n)<<endl;
    
}

return 0;
}
