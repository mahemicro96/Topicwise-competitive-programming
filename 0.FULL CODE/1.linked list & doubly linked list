Effective approach:
--------------
#include <iostream> 
using namespace std; 

class Node { 
	public:	
	int data; 
	 Node* next,*prev,*head;

		Node()
		{
			head=NULL;
		}
	Node(int data) 
	{ 
		this->data = data; 
		next = NULL; 
		prev=NULL;
	} 
		void push(int data) 
	{ 
		Node* temp = new Node(data); 
	if(head==NULL)
	{
		head=temp;
	}
	else
	{
		Node *trav=head;
		while(trav&&trav->next)
		{
			trav=trav->next;
		}
		trav->next=temp;
		temp->prev=trav;
	}
	} 
		void print() 
	{ 
		 Node* temp = head; 
		while (temp != NULL) { 
			cout << temp->data << " "; 
			temp = temp->next; 
		} 
	} 
}; 



/* Driver program to test above function*/
int main() 
{ 
	/* Start with the empty list */
	Node ll; 
	ll.push(20); 
	ll.push(4); 
	ll.push(15); 
	ll.push(85); 

	cout << "Given linked list\n"; 
	ll.print(); 
cout<<ll.head->data<<endl;

	return 0; 
} 
--------------------------------------------------------------------------


// C++ program to delete a linked list 
#include <bits/stdc++.h> 
using namespace std; 

/* Link list node */
class Node 
{ 
	public: 
	int data; 
	Node* next; 
}; 

/* Function to delete the entire linked list */
void deleteList(Node** head_ref) 
{ 
	
Node* current = *head_ref; 
Node* next; 

while (current != NULL) 
{ 
	next = current->next; 
	free(current); 
	current = next; 
} 

*head_ref = NULL; 
} 

void push(Node** head_ref, int new_data) 
{ 
	/* allocate node */
	Node* new_node = new Node(); 

	/* put in the data */
	new_node->data = new_data; 
	
	/* link the old list off the new node */
	new_node->next = (*head_ref); 
	
	/* move the head to point to the new node */
	(*head_ref) = new_node; 
} 
int main() 
{ 
	/* Start with the empty list */
	Node* head = NULL; 
	
	/* Use push() to construct below list 
	1->12->1->4->1 */
	push(&head, 1); 
	push(&head, 4); 
	push(&head, 1); 
	push(&head, 12); 
	push(&head, 1); 
	
	cout << "Deleting linked list"; 
	deleteList(&head); 
	
	cout << "\nLinked list deleted"; 
} 

---------------------------------------------
#include <bits/stdc++.h> 
using namespace std; 

/* Linked list node */
class Node 
{ 
	public: 
	int data; 
	Node* next; 
}; 

/* Function to create a new node with given data */
Node *newNode(int data) 
{ 
	Node *new_node = new Node; 
	new_node->data = data; 
	new_node->next = NULL; 
	return new_node; 
} 
// This function mainly uses addOneUtil(). 
Node* multipletwo(Node *head) 
{ 
	Node *temp=head;
	while(temp)
	{
		
	temp->data=temp->data*2;
	temp=temp->next;
	}
	return head;
} 

// A utility function to print a linked list 
void printList(Node *node) 
{ 
	while (node != NULL) 
	{ 
		cout << node->data<<" "; 
		node = node->next; 
	} 
	cout<<endl; 
} 

/* Driver program to test above function */
int main(void) 
{ 
	Node *head = newNode(1); 
	head->next = newNode(9); 
	head->next->next = newNode(9); 
	head->next->next->next = newNode(9); 


	printList(head); 

	head = multipletwo(head); 

	cout<<endl;
	printList(head); 

	return 0; 
} 
