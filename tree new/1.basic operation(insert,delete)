/*
Algorithm for deletion
1. Starting at root, find the deepest and rightmost node in binary tree and node which we want to delete.
2. Replace the deepest rightmost nodeâ€™s data with node to be deleted.
3. Then delete the deepest rightmost node.
*/
#include<iostream>
#include<queue>
using namespace std;
struct bt{
  
	int data;
	bt *right;
	bt *left;
	bt *btinsert(int k)
	{
		bt *temp=new bt;
		temp->data=k;
		temp->right=temp->left=NULL;
		return temp;
	}
};
void inorder(bt *root)
{
	if(root)
	{
	    
		if(root->left)
		inorder(root->left);
		cout<<root->data<<" ";
		if(root->right)
		inorder(root->right);
	}
}
void insert(bt *root,int e)
{ 
    struct bt m;
    queue<bt*>q;
    q.push(root);
    while(q.size())
    {
        bt *temp=q.front();
        q.pop();
        if(!temp->left)
        {
            temp->left=m.btinsert(e);
            return;
        }
        if(temp->left)
        q.push(temp->left);
         if(!temp->right)
        {
            temp->right=m.btinsert(e);
            return;
        }
        if(temp->right)
        q.push(temp->right);
    }
    
}
void ddelete(bt*root,bt* tar)
{
    queue<bt*>q;
    q.push(root);
    while(q.size())
    {
        bt* temp=q.front();
        q.pop();
        if(temp->left==tar)
        {
            temp->left=NULL;
            delete (tar);
            return;
        }
        if(temp->left)
        q.push(temp->left);
        if(temp->right==tar)
        {
            temp->right=NULL;
            delete (tar);
            return;
        }
        if(temp->right)
        q.push(temp->right);
        
    }
}
bt* checkdelete(bt*root,int k)
{
    //if no node is available
    if(root==NULL)
    return NULL;
    //if only one node is available in the tree
    if(root->left==NULL&&root->right==NULL)
    {
        if(root->data==k)
            return NULL;
        else
            return root;
    }
    queue<bt*>q;
    q.push(root);
    bt *key=NULL;
    bt *temp;
    while(q.size())
    {
        temp=q.front();
        q.pop();
        //for finding k is exit or not
        if(temp->data==k)
        key=temp;
        if(temp->left)
        q.push(temp->left);
        if(temp->right)
        q.push(temp->right);
    }
    //if k is exist
    if(key)
    {
    int x=temp->data;
    ddelete(root,temp);
    key->data=x;
   
    }
     return root;
   
}
int main()
{
	struct bt k;
	struct bt *root;
	root=k.btinsert(1);
	root->left=k.btinsert(2);
	root->right=k.btinsert(3);
	root->left->left=k.btinsert(4);
	root->left->right=k.btinsert(5);
	inorder(root);
	cout<<endl;
	insert(root,7);
		insert(root,8);
			insert(root,9);
	inorder(root);
	cout<<endl;
	root=checkdelete(root,1);
	inorder(root);
return 1;	
}
	
